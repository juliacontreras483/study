print("Good afternoon, ya'll!")


# Exercise 87
# Write a function named get_paper_title that takes in a dictionary and returns the title property

assert get_paper_title(tukey_paper) == "The Future of Data Analysis"
assert get_paper_title(thomas_paper) == "A mathematical model of glutathione metabolism"
print("Exercise 87 is correct.")


# Exercise 88
# Write a function named get_year_published that takes in a dictionary and returns the value behind the "year_published" key.

assert get_year_published(tukey_paper) == 1962
assert get_year_published(thomas_paper) == 2008
print("Exercise 88 is correct.")


# Exercise 89
# Write a function named get_price that takes in a dictionary and returns the price

assert get_price(book) == 36.99
print("Exercise 89 is complete.")


# Exercise 90
# Write a function named get_book_author that takes in a dictionary (the above declared book variable) and returns the author's name


assert get_book_author(book) == "Frances Buontempo"
print("Exercise 90 is complete.")

# Exercise 91
# Write a function named get_number_of_books that takes in a list of objects and returns the number of dictionaries in that list.

assert get_number_of_books(books) == 4
print("Exercise 91 is complete.")



# Exercise 92
# Write a function named total_of_book_prices that takes in a list of dictionaries and returns the sum total of all the book prices added together

assert total_of_book_prices(books) == 122.9
print("Exercise 92 is complete.")

# Exercise 93
# Write a function named get_average_book_price that takes in a list of dictionaries and returns the average book price.

assert get_average_book_price(books) == 30.725
print("Exercise 93 is complete.")


# Exercise 94
# Write a function called highest_price_book that takes in the above defined list of dictionaries "books" and returns the dictionary containing the title, price, and author of the book with the highest priced book.
# Hint: Much like sometimes start functions with a variable set to zero, you may want to create a dictionary with the price set to zero to compare to each dictionary's price in the list

assert highest_price_book(books) == {
    "title": "The Visual Display of Quantitative Information",
    "price": 38.00,
    "author": "Edward Tufte"
}

print("Exercise 94 is complete")

# Exercise 95
 # Write a function called lowest_priced_book that takes in the above defined list of dictionaries "books" and returns the dictionary containing the title, price, and author of the book with the lowest priced book.
 # Hint: Much like sometimes start functions with a variable set to zero or float('inf'), you may want to create a dictionary with the price set to float('inf') to compare to each dictionary in the list


 assert lowest_price_book(books) == {
     "title": "Weapons of Math Destruction",
     "author": "Cathy O'Neil",
     "price": 17.44
 }
 print("Exercise 95 is complete.")

# Exercise 96
# Write a function named get_tax_rate that takes in the above shopping cart as input and returns the tax rate.
# Hint: How do you access a key's value on a dictionary? The tax rate is one key of the entire shopping_cart dictionary.

assert get_tax_rate(shopping_cart) == .08
print("Exercise 96 is complete")

# Exercise 97
# Write a function named number_of_item_types that takes in the shopping cart as input and returns the number of unique item types in the shopping cart.
# We're not yet using the quantity of each item, but rather focusing on determining how many different types of items are in the cart.

assert number_of_item_types(shopping_cart) == 5
print("Exercise 97 is complete.")

# Exercise 98
# Write a function named total_number_of_items that takes in the shopping cart as input and returns the total number all item quantities.
# This should return the sum of all of the quantities from each item type

assert total_number_of_items(shopping_cart) == 17
print("Exercise 98 is complete.")


# Exercise 99
# Write a function named get_average_item_price that takes in the shopping cart as an input and returns the average of all the item prices.
# Hint - This should determine the total price divided by the number of types of items. This does not account for each item type's quantity.
assert get_average_item_price(shopping_cart) == 2.1420000000000003
print("Exercise 99 is complete.")

# Exercise 100
# Write a function named get_average_spent_per_item that takes in the shopping cart and returns the average of summing each item's quanties times that item's price.
# Hint: You may need to set an initial total price and total total quantity to zero, then sum up and divide that total price by the total quantity

assert get_average_spent_per_item(shopping_cart) == 1.333529411764706
print("Exercise 100 is complete.")

# Exercise 101
# Write a function named most_spent_on_item that takes in the shopping cart as input and returns the dictionary associated with the item that has the highest price*quantity.
# Be sure to do this as programmatically as possible.
# Hint: Similarly to how we sometimes begin a function with setting a variable to zero, we need a starting place:
# Hint: Consider creating a variable that is a dictionary with the keys "price" and "quantity" both set to 0. You can then compare each item's price and quantity total to the one from "most"

assert most_spent_on_item(shopping_cart) == {
    "title": "chocolate",
    "price": 0.75,
    "quantity": 9
}
print("Exercise 101 is complete.")